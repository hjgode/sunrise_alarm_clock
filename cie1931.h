// CIE1931 correction table
// Automatically generated, see http://jared.geek.nz/2013/feb/linear-led-pwm
#include <arduino.h>

prog_uchar redList[] PROGMEM = {  0,8,17,26,35,43,52,61,70,79,87,96,105,114,123,131,140,149,158,167,175,184,193,202,211,219,228,237,246,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,254,253,253,252,252,251,250,250,249,249,248,247,247,246,246,245,245,244,243,243,242,242,241,240,240,239,239,238,237,237,236,236,235,235,234,233,233,232,232,231,230,230,229,229,228,228,227,226,226,225,225,224,223,223,222,222,221,220,220,219,219,218,218,217,216,216,215,215,214,213,213,212,212,211,211,210,209,209,208,208,207,206,206,205,205,204,203,203,202,202,201,201,200,199,199,198,198,197,196,196,195,195,194,193,193,192,192,191,191,190,189,189,188,188,187,186,186,185,185,184,184,183,182,182,181,181,180,179,179,178,178,177,176,176,175,175,174,174,173,172,172,171,171,170,169,169,168,168,167,167,166,165,165,164,164,163,162,162,161,161,160,159,159,158,158,157,157,156,155,155,154,154,153,152,152,151,151,150,150,149,148,147,146,145,144,142,141,140,139,138,137,136,135,134,133,132,131,130,129,128};
prog_uchar greenList[] PROGMEM = {  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,4,6,8,10,13,15,17,19,21,23,26,28,30,32,34,36,39,41,43,45,47,49,52,54,56,58,60,62,65,67,69,71,73,75,78,80,82,84,86,88,91,93,95,97,99,101,104,106,108,110,112,114,117,119,121,123,125,128,128,130,132,135,137,140,142,145,147,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,149,148,147,146,145,144,142,141,140,139,138,137,136,135,134,133,132,131,130,129,128};
prog_uchar blueList[] PROGMEM = {  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,2,3,5,6,7,9,10,11,12,14,15,16,18,19,20,22,23,24,25,27,28,29,31,32,33,34,36,37,38,40,41,42,44,45,46,47,49,50,51,53,54,55,57,58,59,60,62,63,64,66,67,68,69,71,72,73,75,76,77,79,80,81,82,84,85,86,88,89,90,92,93,94,95,97,98,99,101,102,103,104,106,107,108,110,111,112,114,115,116,117,119,120,121,123,124,125,127,128,129,130,132,133,134,136,137,138,139,141,142,143,145,146,147,149,150,151,152,154,155,156,158,159,160,162,163,164,165,167,168,169,171,172,173,174,176,177,178,180,181,182,184,185,186,187,189,190,191,193,194,195,197,198,199,200,202,203,204,206,207,208,209,211,212,213,215,216,217,219,220,221,222,224,225,226,228,229,230,232,233,234,235,236,237,238,240,241,242,243,244,245,246,247,248,249,250,251,252,253,255};

int redRamp[] ={0,11, 14, 18, 22, 28, 35, 44, 54, 68, 85, 106, 133, 166, 207, 259, 324, 405, 456, 513, 577, 649, 730, 822, 924, 1023, 1023, 1023, 1023, 1023, 1023, 1023};
int greenRamp[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 51, 120, 214, 340, 506, 570, 641, 721, 811, 913, 1023, 1023, 1023, 1023};
int blueRamp[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 155, 367, 671, 755, 850, 956, 1023, 1023, 1023};

prog_uchar cie[] PROGMEM = {
	0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 3, 3, 3, 3, 3, 3, 3, 
	3, 4, 4, 4, 4, 4, 4, 5, 5, 5, 
	5, 5, 6, 6, 6, 6, 6, 7, 7, 7, 
	7, 8, 8, 8, 8, 9, 9, 9, 10, 10, 
	10, 10, 11, 11, 11, 12, 12, 12, 13, 13, 
	13, 14, 14, 15, 15, 15, 16, 16, 17, 17, 
	17, 18, 18, 19, 19, 20, 20, 21, 21, 22, 
	22, 23, 23, 24, 24, 25, 25, 26, 26, 27, 
	28, 28, 29, 29, 30, 31, 31, 32, 32, 33, 
	34, 34, 35, 36, 37, 37, 38, 39, 39, 40, 
	41, 42, 43, 43, 44, 45, 46, 47, 47, 48, 
	49, 50, 51, 52, 53, 54, 54, 55, 56, 57, 
	58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 
	68, 70, 71, 72, 73, 74, 75, 76, 77, 79, 
	80, 81, 82, 83, 85, 86, 87, 88, 90, 91, 
	92, 94, 95, 96, 98, 99, 100, 102, 103, 105, 
	106, 108, 109, 110, 112, 113, 115, 116, 118, 120, 
	121, 123, 124, 126, 128, 129, 131, 132, 134, 136, 
	138, 139, 141, 143, 145, 146, 148, 150, 152, 154, 
	155, 157, 159, 161, 163, 165, 167, 169, 171, 173, 
	175, 177, 179, 181, 183, 185, 187, 189, 191, 193, 
	196, 198, 200, 202, 204, 207, 209, 211, 214, 216, 
	218, 220, 223, 225, 228, 230, 232, 235, 237, 240, 
	242, 245, 247, 250, 252, 255, 
};

struct hsvRGB{
 float H, S, V, R, G, B;
}; 

// ######### oder http://www.mikrocontroller.net/attachment/highlight/66380 #####
hsvRGB hsv_to_rgb(hsvRGB _hsv)  
{
 float h=_hsv.H;       // HSV Werte kopieren
 float s=_hsv.S;
 float v=_hsv.V;

 float r,g,b;      

 int i;
 float f, p, q, t;

 if( s == 0 ) 
   {
  r = g = b = v;
  _hsv.R=_hsv.G=_hsv.B=_hsv.V;
  return _hsv;
  }

 h /= 60;        // sector 0 to 5
 i = floor( h );
 f = h - i;      
 p = v * ( 1 - s );
 q = v * ( 1 - s * f );
 t = v * ( 1 - s * ( 1 - f ) );

 switch( i )
      {
    case 0:
      r = v; g = t; b = p; break;
    
    case 1:
      r = q; g = v; b = p; break;
      
    case 2:
      r = p; g = v; b = t; break;
        
    case 3:
      r = p; g = q; b = v; break;      
        
    case 4:
      r = t; g = p; b = v; break;
                
    default:                
      r = v; g = p; b = q; break;        // case 5:          
    }

 
 int rc=r*255;                    // Auf 8 Bit RGB skalieren, nacher nur noch kopieren
 int gc=g*255;
 int bc=b*255; 
 _hsv.R=rc;
 _hsv.G=gc;
 _hsv.B=bc;
  return _hsv;
}
